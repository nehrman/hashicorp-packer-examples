{
    "variables": {
        "subscription_id": "8708baf2-0a54-4bb4-905b-78d21ac150da",
        "client_id": "10bbe820-077a-4786-83bf-e005eccd9cff",
        "client_secret": "{{env `ARM_CLIENT_SECRET`}}",
        "resource_group_name": "nehrman-packer-test",
        "version": "0.1"
    },

    "sensitive-variables": ["client_secret"],

    "builders":[{

        "type": "azure-arm",

        "subscription_id": "{{user `subscription_id`}}",
        "client_id": "{{user `client_id`}}",
        "client_secret": "{{user `client_secret`}}",

        "capture_container_name ": "{{user `resource_group_name`}}",
        "capture_name_prefix": "",
        "build_resource_group_name": "{{user `resource_group_name`}}",

        "os_type": "windows",
        "image_url ": "",
        "os_disk_size_gb": "130",
        
        "communicator": "winrm",
        "winrm_use_ssl": "true",
        "winrm_insecure": "true",
        "winrm_timeout": "3m",
        "winrm_username": "packer",
        "azure_tags": {
            "version": "{{user `version`}}",
            "owner": "nehrman"
        },

        "vm_size": "Standard_DS2_v2"
    }],
    "provisioners": [{
       "type": "powershell",
         "inline": [
            " # NOTE: the following *3* lines are only needed if the you have installed the Guest Agent.",
            "  while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
            "  while ((Get-Service WindowsAzureTelemetryService).Status -ne 'Running') { Start-Sleep -s 5 }",
            "  while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }",

            "if( Test-Path $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml ){ rm $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml -Force}",
            "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit",
            "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"
         ]
    }]
}